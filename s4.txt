//credits: https://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query/

#include<bits/stdc++.h>
using namespace std;
const int N=1e5+5;
 
 
int minVal(int x, int y) { return (x < y)? x: y; }
 
int getMid(int s, int e) {  return s + (e -s)/2;  }
 
int RMQUtil(int *st, int ss, int se, int qs, int qe, int index)
{
    if (qs <= ss && qe >= se)
        return st[index];
 
    if (se < qs || ss > qe)
        return INT_MAX;
 
    int mid = getMid(ss, se);
    return minVal(RMQUtil(st, ss, mid, qs, qe, 2*index+1),
                  RMQUtil(st, mid+1, se, qs, qe, 2*index+2));
}
 
int RMQ(int *st, int n, int qs, int qe)
{
    if (qs < 0 || qe > n-1 || qs > qe)
    {
        printf("Invalid Input");
        return -1;
    }
 
    return RMQUtil(st, 0, n-1, qs, qe, 0);
}
 
int constructSTUtil(int arr[], int ss, int se, int *st, int si)
{
    if (ss == se)
    {
        st[si] = arr[ss];
        return arr[ss];
    }
 
    int mid = getMid(ss, se);
    st[si] =  minVal(constructSTUtil(arr, ss, mid, st, si*2+1),
                     constructSTUtil(arr, mid+1, se, st, si*2+2));
    return st[si];
}
 
int *constructST(int arr[], int n)
{
    int x = (int)(ceil(log2(n))); 
 
    int max_size = 2*(int)pow(2, x) - 1; 
 
    int *st = new int[max_size]; 
 
    constructSTUtil(arr, 0, n-1, st, 0);
 
    return st;
}
 
int main(){
 
int n;
cin>>n;
 
int a[n],sum=0,c=0;
 
vector<int>mp[N];
 
int max=0;
int freq[10001]={0};
 
for (int i = 0; i < n; ++i)
{
	cin>>a[i];
	sum+=a[i];
 
	freq[a[i]]=1;
 
	if(a[i]>max)
		max=a[i];
 
	mp[a[i]].push_back(i);
}
 
int *st = constructST(a, n);
 
 
vector<int>v;
 
for (int i = 0; i < 10001; ++i)
{
	if(freq[i])
		v.push_back(i);
}
 
for(int i=0;i<v.size();i++)
{
	int x=v[i];
	
	
 
	int y=mp[x].size();
 
	if(y==1)
		c++;
 
	else
	{
		for(int j=1;j<mp[x].size();j++)
		{
		   // cout<<j <<' ';
			int mimi=RMQ(st, n, mp[x][j-1], mp[x][j]);
 
			if(mimi<x)
				c++;
		}
		c++;
	//	cout<<endl;
	}
 
}
 
cout<<c<<endl;
 
return 0;
}
 
 