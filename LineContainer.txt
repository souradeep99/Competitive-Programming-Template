template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

struct Line {
    mutable int k, m, p; 
    int eval (int x) { return k * x + m; }
    bool operator<(const Line& o) const { return k < o.k; }
    bool operator<(int x) const { return p < x; }
};

struct LineContainer : multiset<Line,less<>> { 
    const int inf = LLONG_MAX;
    int div(int a, int b) { return a  / b-(( a ^ b ) < 0 && a % b); } 
    int bet(const Line& x, const Line& y) { 
        if (x.k == y.k) return x.m >= y.m ? inf : -inf;
        return div(y.m - x.m ,x.k - y.k);
    }
    bool isect(iterator x, iterator y) { 
        if (y == end()) { x -> p = inf; return 0; }
        x -> p = bet(*x,*y); return x -> p >= y -> p;
    }
    
    void add(int k, int m) {
        auto z = insert({k, m, 0}), y = z++, x = y;
        while (isect(y, z)) z = erase(z);
        if (x != begin() && isect(--x, y)) isect(x, y = erase(y));
        while ((y = x) != begin() && (--x) -> p >= y -> p) isect(x, erase(y));
    }
    int query(int x) {
        assert(!empty());
        auto l = *lower_bound(x);
        return l.k * x + l.m;
    }
};